// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int current_len, max_len;
    field Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let string = Array.new(maxLength);
        }
        else {
            let string = null;
        }
        let current_len = 0;
        let max_len = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return current_len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j > current_len) {
            do Sys.error(2);
        }
        return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < current_len) {
            let string[j] = c;
        }
        else {
            do Sys.error(1);
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (current_len < max_len) {
            let string[current_len] = c;
            let current_len = current_len + 1;
        }
        else {
            do Sys.error(17);
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (current_len > 0) {
            let current_len = current_len - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, i, d;
        var boolean is_neg;
        let is_neg = (string[0] = 45);
        let v = 0;
        if (is_neg) {
            let i = 1;
        }
        else {
            let i = 0;
        }
        while ((i < current_len) & (string[i] < 58) & (string[i] > 47)) {
            let d = string[i] - 48;
            let v = (v * 10) + d;
            let i = i + 1;
        }
        if (is_neg) {
            return -v;
        }
        return v;
    }

    method String intToString(int val) {
        var int last_digit, quotient, temp;
        var char c;
        var String output;
        let temp = val;
        let output = String.new(5); // No number can be larger than 32767
        if (val < 0) {
            do Sys.error(1);
        }
        while (temp > 0) {
            let quotient = temp / 10;
            let last_digit = temp - (quotient * 10);
            do output.appendChar(last_digit + 48);
            let temp = quotient;
        }
        return output;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let string = intToString(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
