// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, curr;
        let twoToThe = Array.new(16);
        let i = 0;
        let curr = 1;
        while (i < 16) {
            let twoToThe[i] = curr;
            let curr = curr + curr;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    /** Checks if the j'th bit of x is 1 or 0 */
    method int bit(int x, int j) {
        var int mask;
        let mask = twoToThe[j];
        return (x & mask);
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, j;
        if (x < 0) {
            let x = Math.abs(x);
        }
        if (y < 0) {
            let y = Math.abs(y);
        }
        let sum = 0;
        let j = 0;
        let shiftedX = x;
        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, y + y);
        if ((x - ((q + q) * y)) < y) {
            return (q + q);
        }
        else {
            return ((q + q) + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp;
        let y = 0;
        let j = (16 / 2) - 1;
        while ((j > 0) | (j = 0)) {
            let temp = (y + twoToThe[j]) * (y + twoToThe[j])
            if ((temp < (x + 1)) & (temp > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
