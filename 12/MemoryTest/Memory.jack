// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static int freeList;

    /** Initializes the class. */
    function void init() {

        var Array heap;

        let ram = 0;
        let heap = 2048;  // sets base of heap at appropriate address
        let heap[0] = 0;  // end of list
        let heap[1] = 14334;  // length of heap
        let freeList = 2048;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Returns 0 upon failure. */
    function int alloc(int size) {
        var int curField, nextField, sizeField;
        let curField = freeList;
        let nextField = ram[freeList];
        let sizeField = ram[freeList + 1];
        while (~(curField = 0)) {
            if (sizeField > size) {
                let ram[curField + 1] = sizeField - size - 1;  // update size
                let ram[curField + sizeField - size + 1] = size;  // allocated
                                                                // block's size
                return curField + sizeField - size + 2;
            }
            let curField = nextField;
            let nextField = ram[curField];
            let sizeField = ram[curField + 1];
        }
        return 0;  // failure
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp;
        let temp = freeList;
        let freeList = o - 1;
        let o[0] = o[-1];
        let o[-1] = temp;
        return;
    }    
}
