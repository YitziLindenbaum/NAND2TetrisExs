/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Output if C-instruction

    // outM & addressM
    Mux16(a=instruction, b=COutM, sel=instruction[15], out=MuxA);
    Not(in=instruction[15], out=AIns);
    Or(a=AIns, b=instruction[5], out=loadA);
    ARegister (in=MuxA, load=loadA, out=aReg, out[0..14]=CAddressM);

    Mux16(a=aReg, b=inM, sel=instruction[12], out=AorM); // choose A or M
    DRegister (in=COutM, load=instruction[4], out=dReg);
    ExtendAlu(x=dReg, y=AorM, instruction=instruction[6..14], out=COutM,
    zr=ExtZr, ng=ExtNg);

    // writeM
    And(a=instruction[3], b=instruction[3], out=CWriteM);

    // Jump?
    And (a=instruction[2], b=ExtNg, out=jumpLessThan);
    And (a=instruction[1], b=ExtZr, out=jumpEquals);
    Not (in=ExtNg, out=notNg);
    Not (in=ExtZr, out=notZr);
    And (a=notNg, b=notZr, out=andNotNgNotZr);
    And (a=instruction[0], b=andNotNgNotZr, out=jumpGreaterThan);
    Or (a=jumpLessThan, b=jumpEquals, out=jumpLessThanEquals);
    Or (a=jumpGreaterThan, b=jumpLessThanEquals, out=loadJump);

    // PC
    PC (in=aReg, load=loadJump, inc=true, reset=reset, out[0..14]=Cpc);

    // Output if A-instruction (regular CPU)
    CPU(inM=inM, instruction=instruction, reset=reset, outM=AOutM,
    writeM=AWriteM, addressM=AAddressM, pc=Apc);

    // Decision 2020
    Mux16(a=AOutM , b=COutM ,sel=instruction[15], out=outM);
    Mux16(a[15]=true, a[0..14]=AAddressM, b[15]=true, b[0..14]=CAddressM,
    sel=instruction[15], out[0..14]=addressM);
    Mux16(a[15]=true, a[0..14]=Apc, b[15]=true, b[0..14]=Cpc,
    sel=instruction[15], out[0..14]=pc);
    Mux(a=AWriteM, b=CWriteM, sel=instruction[15], out=writeM);

}
