/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:

     // Regular ALU
     Nand(a=instruction[7], b=instruction[8], out=NotRegALU); // condition
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
         ny=instruction[2], f=instruction[1], no=instruction[0], out=RegOut,
         zr=RegZr, ng = RegNg); // output

     // Multiplication
     Not(in=instruction[7], out=Mult); // condition
     Mul(a=x, b=y, out=product); // output

     // Shift
     ShiftRight(in=y, out=yShiftRight);
     ShiftRight(in=x, out=xShiftRight);
     ShiftLeft(in=y, out=yShiftLeft);
     ShiftLeft(in=x, out=xShiftLeft);
     Mux4Way16(a=yShiftRight, b=xShiftRight, c=yShiftLeft, d=xShiftLeft,
               sel=instruction[4..5], out=shift);

     // Decision 2020
     Mux16(a=product, b=shift, sel=instruction[7], out=MultOrShift,
           out[15]=ngMorS);
     EqualsZero16(x=MultOrShift, out=zrMorS);

     Mux16(a=RegOut, b=MultOrShift, sel=NotRegALU, out=out);
     Mux(a=RegZr, b=zrMorS, sel=NotRegALU, out=zr);
     Mux(a=RegNg, b=ngMorS, sel=NotRegALU, out=ng);

}
